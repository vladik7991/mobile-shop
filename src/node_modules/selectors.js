import * as R from 'ramda'

export const getPhoneById = (state, id) => R.prop(id, state.phones)
// Получение конкретного телефона
export const getPhones = (state, ownProps) => {
  const activeCategoryId = getActiveCategoryId(ownProps)
  const applySearch = item => R.contains(
    state.phonesPage.search,
        //То что мы ищем(текст из input)
    R.prop('name', item)
        //  Получаем имя
  )
    //  Возвращает булевое значение
  const applyCategory = item => R.equals(
    activeCategoryId,
    R.prop('categoryId', item)
  )
  const phones = R.compose(
    R.filter(applySearch),
    R.when(R.always(activeCategoryId), R.filter(applyCategory)),
    R.map(id => getPhoneById(state, id))
  )(state.phonesPage.ids)
  // 1- функция для каждого элемента 2- массив
  return phones
}

export const getRenderedPhonesLength = state => R.length(state.phonesPage.ids)

export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalBasketPrice = state => {
  const totalPrice = R.compose(
    R.sum,
        // Суммируем все элементы 
    R.pluck('price'),
        // Вытаскиваем цену из каждого обьекта
    R.map(id => getPhoneById(state, id))
    //  В результате имеем массив телефонов(По каждому id из корзины)
  )(state.basket)

  return totalPrice
}

export const getCategories = state => R.values(state.categories)
// Получаем массив обьектов categories

export const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps)
// По очереди запрашиваем у ownProps части(При ненахождении получим undefined)

export const getBasketPhonesWithCount = state => {
  const phoneCount = id => R.compose(
     R.length,
    //  считаем кол-во
     R.filter(basketId => R.equals(id, basketId))
    //  Фильтруем по id телефона
  )(state.basket)
  const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone)
  // Создаем поле count в phone, которое = phoneCount 
  const uniqIds = R.uniq(state.basket)
  // Список уникальных id из нашей корзины(без повторения)
  const phones = R.compose(
     R.map(phoneWithCount),
     R.map(id => getPhoneById(state, id))
    //  Получаем массив обьектов уникальных телефонов
  ) (uniqIds)

  return phones
}
// state.basket - id с повторениями которые хранятся в корзине